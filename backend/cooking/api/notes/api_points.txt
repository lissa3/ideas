A. Auth (djoser)
====================================================================================================

1.sign-up:
POST localhost:8000/auth/users/ (username,email,password,re_password)

2.activate account
POST localhost:8000/auth/users/activattion/ (uid,token)

3.login
POST localhost:8000/auth/jwt/create/ (email,password)

4.Get info about user
GET localhost:8000/auth/users/me/ (in headers: 'JWT ey...gghghgh')

B Categories
====================================================================================================
# Tree structure for left-side menu
GET localhost:8000/api/v1/categories/ 

#No tree structure for drom-down idea(create/edit) form
GET localhost:8000/api/v1/categories-create-idea/  
example of dj serv resp:[{"name": "Keuken","id": 2},{"name": "School","id": 3}]
#Collect ideas for a given category(categ slug)
GET localhost:8000/api/v1/cats/slug/                

C Ideas (slug)
=====================================================================================================
GET /api/v1/ideas-collection/ideas/(slug=first-post-ysMr)/
DELETE /api/v1/ideas-collection/ideas/slug/

# create and edit idea general info: need Content-Type: multipart/form-data 
general note: POST /api/v1/ideas-collection/ideas/idea/  

#idea created:
POST (ideaInput)=>axios.post(`/api/v1/ideas-collection/ideas/`,ideaInput)=> resp.status = 201    
        tags:   
                = are not required,default = "" will be send to dj server;
                = otherwise: send tag's string (len <50 chars)
                = dj server sends back obj new idea with tags as an array of tags separated by comma
                front: checks for input tags string length(vuelidate), lowecase and trim
                back: clears tags further from possible: ,.:;'*)/(!") 
                error tag from backend: err.response.data.detail (len > limit 50 chars)

        thumbnail:    
                = are not required,default = "" will be send to dj server; (?)       
                
                front: checks for img. size and extentions; 
                back: checks for img size in serializer validatior
#idea edited:

PUT     (slug,ideaInput)=> axios.put(`/api/v1/ideas-collection/ideas/${slug}/`,ideaInput)
        resp.status = 200 OK

# do like: idea id, likeInfo = {"like":boolean}
PATCH   (likeInfo)=> axios.patch(`/api/v1/ideas-collection/relations/${likeInfo.id}/`,likeInfo.like) 
        resp: status = 200 OK, data = {"like":true/false} 

# do rating: idea id, rateInfo = {"rating":1-5}
PATCH   (ratingInfo)=> axios.patch(`/api/v1/ideas-collection/relations/${rating.id}/`,rateInfo.rating) 
        resp: status = 200 OK, data = {"rating":true/false}   

=======================================================================================================

D Profile
GET  localhost:8000/api/v1/profile-info/            headers: Authorization: JWT token
PATCH localhost:8000/api/v1/profile-change/unid/
===================================================================================================
E Tags
======================================================================================================
GET localhost:8000/api/v1/tags/'
GET localhost:8000/api/v1/tags/slug/                 (list ideas for a given tag slug)

GET localhost:8000/api/v1/tags-name/name/            (list ideas for a given tag name)  
    
G Search
Search ideas search_fields = ['title', 'lead_text', 'main_text']
=========================================================================================================
    
GET localhost:8000/api/v1/idea-collection/ideas/?search=yourWord

H.1 
Filter based on: filterset_fields = ['featured','view_count']
GET /api/v1/ideas-collection/ideas/?title=&categ=&featured=true&status=&author=

H.2 
Ordering ordering = ('title','created_at')

GET /api/v1/idea-collection/ideas/?ordering=title
GET /api/v1/idea-collection/ideas/?ordering=-title
GET /api/v1/idea-collection/ideas/?ordering=-created_at
GET /api/v1/idea-collection/ideas/?ordering=-created_at

I.
mix filter and ordering
GET /api/v1/ideas-collection/ideas/?featured=true&ordering=-title

GET /api/v1/ideas-collection/ideas/?featured=true&ordering=-title&limit=2&offset=2